type Query
{
    """ TEST QUERIES """
    allTest : [test]
    testByDateHourAndName(data:String!,hour:String!,nome:String!): test
    testByDateAndName(data:String!,nome:String!): [test]
    testByDate(data:String!): [test]
    testByName(nome:String!): [test]

    """ DOMANDA QUERIES """
    allDomandaByTest(data:String!,hour:String!,nome:String!): [domanda]
    domandaByNome(nome:String!): domanda

    """ RISPOSTA QUERIES """
    allRispostaOfDomanda(domanda:String!): [risposta]

    """ COMPILAZIONE QUERY """
    allCompilazioniByUserOfExam(idUtente:Int!,dataTest:String!,oraTest:String!,nomeTest:String!):[compilazione]
    examListWithPreviousCompilationFlag(idUtente:Int!):[testWithCompilationFlag]
}

type Mutation
{
    createTest(input:testInput):Boolean
    createDomanda(input:domandaInput):Boolean
    createRisposta(input:rispostaInput):Boolean
    connectDomandaToTest(input:intestInput):Boolean
    insertCompilazione(input:compilazioneInput):Boolean
    completeTest(input:compilazioneInput):[result]
}

type test
{
    data:             String!
    ora:              String!
    nome:             String!
    ordineCasuale:    Boolean
    domandeConNumero: Boolean
}

type domanda
{
    nome :            String!
    testo:            String!
    punti:            Float
    ordineCasuale:    Boolean
    risposteConNumero:Boolean
}

type risposta
{
    id :              ID!
    testo:            String!
    punteggio:        Float
    domanda:          String!
}

type compilazione
{
    idUtente:         Int!
    dataTest:         String!
    oraTest:          String!
    nomeTest:         String!
    nomeDomanda:      String!
    idRisposta:       Int!
}

type result
{
    rispostaData:        String!
    puntiRispostaData:   Float!
    rispostaEsatta:      String!
}

type testWithCompilationFlag
{
    data:                 String!
    ora:                  String!
    nome:                 String!
    existPrevCompilation: Boolean!
}

input testInput
{
    data:             String!
    ora:              String!
    nome:             String!
    ordineCasuale:    Boolean
    domandeConNumero: Boolean
}

input domandaInput
{
    nome :            String!
    testo:            String!
    punti:            Float
    ordineCasuale:    Boolean
    risposteConNumero:Boolean
}

input rispostaInput
{
    testo:            String!
    punteggio:        Float
    domanda:          String!
}

input intestInput
{
    domanda:         String!
    dataTest:        String!
    oraTest:         String!
    nomeTest:        String!
}

input compilazioneInput
{
    idUtente:        Int!
    dataTest:        String!
    oraTest:         String!
    nomeTest:        String!
    nomeDomanda:     String!
    idRisposta:      Int!
}